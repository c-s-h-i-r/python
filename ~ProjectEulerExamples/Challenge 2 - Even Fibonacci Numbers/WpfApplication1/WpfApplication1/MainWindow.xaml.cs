using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Fibonacci
{
    public partial class MainWindow : Window
    {
        private int upperBound = 10;
        private List<System.Numerics.BigInteger> fibonacciLookup = new List<System.Numerics.BigInteger>();
        public MainWindow()
        {
            InitializeComponent();
            fibonacciLookup.Add(0); fibonacciLookup.Add(1); fibonacciLookup.Add(2); fibonacciLookup.Add(3);
        }
        /// <summary>
        /// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        /// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        /// </summary>
        /// <returns>find sum of even-valued terms < upperbound.<returns>
        private void Submit_Click(object sender, RoutedEventArgs e)
        {
            
            try { 
                upperBound = int.Parse(UpperBounds.Text); 
            }catch (Exception)
            {
                upperBound = 10;
                UpperBounds.Text = upperBound.ToString();
            }

            Result.Content = "Result: " + findEvenFibonacciSumDP();
            
        }

        #region dynamic programming attempt SLOW
        private BigInteger findEvenFibonacciSumDP()
        {

            BigInteger evenSum = 0, sum = 0;
            //getFibonacciTerm(upperBound);

            foreach(BigInteger nth in fibonacciLookup){
                evenSum += (nth % 2 == 0 ? nth : 0);
                sum += nth;
                
            }
                   //TODO ---------------     
            
            return evenSum;
        }//findSums

        private BigInteger getFibonacciTerm(int n)
        {
            if (n < 1) return 0;
            System.Numerics.BigInteger term = 0;

            try
            {
                term = fibonacciLookup[n];
            }
            catch (Exception)
            {

            }
            if (term > 0)
            {
                return term;
            }

            //if(n == 1) return 1;

            //            if(n == 2) return 2;


            //            System.Numerics.BigInteger termPre2 = 1, termPre1 = 2;
            //term = 3;   //term 3
            for (int i = 3; i <= n; i++)
            {

                term = fibonacciLookup[i - 1] + fibonacciLookup[i - 2];
                if (fibonacciLookup.Count <= i)
                {
                    fibonacciLookup.Add(term);
                }
            }

            return term;
        }
        #endregion
    }
}
